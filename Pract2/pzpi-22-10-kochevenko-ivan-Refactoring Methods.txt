МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»




Звіт
до практичного заняття №2 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Методи рефакторингу коду програмного забезпечення»





Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-22-10                                                            ст. викладач кафедри ПІ 
Кочевенко Іван Анатолійович                                         Сокорчук Ігор Петрович







Харків 2024

Мета:
Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

Завдання:
1. Студент повинен обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code».
2. Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів.
3. Кожен метод рефакторингу повинен супроводжуватись:
   • Описом проблеми, яку вирішує даний метод.
   • Кодом до і після застосування методу рефакторингу.
   • Поясненням переваг використаного методу.

Хід роботи:
Було обрано теми: Replace Parameter with Method Call, Replace Subclass with Fields, Change Value to Reference. У презентації (Додаток Б) наведено основні правила і рекомендації щодо виконання цих дій.

Висновки:
Набуто навичок рефакторингу програмного коду, детально розглянуто способи та правила для виконнання таких дій як Replace Parameter with Method Call, Replace Subclass with Fields, Change Value to Reference.

Відео-презентація: https://youtu.be/5vvFYaSjeVg?si=OPYPIJyh9nPPT6oE


ДОДАТОК А

Файл «replace_parameter_with_method_call_before_ref.rb»
1. class Order
2.   attr_reader :quantity, :item_price
3. 
4.   def initialize(quantity, item_price)
5.     @quantity = quantity
6.     @item_price = item_price
7.   end
8. 
9.   # Метод для розрахунку загальної суми знижки
10.   def final_price(discount_rate)
11.     base_price = quantity * item_price
12.     discount = base_price * discount_rate
13.     base_price - discount
14.   end
15. end

Файл «replace_parameter_with_method_call_after_ref.rb»
1. class Order
2.   attr_reader :quantity, :item_price
3. 
4.   def initialize(quantity, item_price)
5.     @quantity = quantity
6.     @item_price = item_price
7.   end
8. 
9.   # Метод для отримання ставки знижки
10.   def discount_rate
11.     quantity > 20 ? 0.2 : 0.1
12.   end
13. 
14.   # Метод для розрахунку загальної суми знижки
15.   def final_price
16.     base_price = quantity * item_price
17.     discount = base_price * discount_rate
18.     base_price - discount
19.   end
20. end

Файл «replace_subclass_with _fields_before_ref.rb»
1. class Employee
2.   def monthly_salary
3.     raise NotImplementedError, 'This method should be overridden by subclasses'
4.   end
5. end
6. 
7. class FullTimeEmployee < Employee
8.   def monthly_salary
9.     5000
10.   end
11. end
12. 
13. class PartTimeEmployee < Employee
14.   def monthly_salary
15.     2000
16.   end
17. end

Файл «replace_subclass_with _fields_after_ref.rb»
1. class Employee
2.   attr_reader :monthly_salary
3. 
4.   # Захищений конструктор
5.   protected def initialize(monthly_salary)
6.     @monthly_salary = monthly_salary
7.   end
8. 
9.   # Методи для створення різних типів співробітників
10.   def self.full_time
11.     new(5000)
12.   end
13. 
14.   def self.part_time
15.     new(2000)
16.   end
17. end

Файл «change_value_to_reference_before_ref.rb»
1. class Currency
2.   attr_reader :code
3. 
4.   def initialize(code)
5.     @code = code
6.   end
7. 
8.   def ==(other)
9.     other.is_a?(Currency) && code == other.code
10.   end
11. end

Файл «change_value_to_reference_after_ref.rb»
class Currency
  attr_reader :code

  # Сховище для унікальних об'єктів
  @instances = {}

  # Захищений конструктор
  protected def initialize(code)
    @code = code
  end

  # метод для створення або отримання існуючого екземпляра
  def self.find_or_create(code)
    @instances[code] ||= new(code)
  end

  def ==(other)
    other.is_a?(Currency) && code == other.code
  end
end


ДОДАТОК Б


Рисунок 1 – Слайд 1


Рисунок 2 – Слайд 2


Рисунок 3 – Слайд 3


Рисунок 4 – Слайд 4


Рисунок 5 – Слайд 5


Рисунок 6 – Слайд 6


Рисунок 7 – Слайд 7


Рисунок 8 – Слайд 8


Рисунок 9 – Слайд 9


Рисунок 10 – Слайд 10


Рисунок 11 – Слайд 11


Рисунок 12 – Слайд 12


Рисунок 13 – Слайд 13


Рисунок 14 – Слайд 14


Рисунок 15 – Слайд 15


Рисунок 16 – Слайд 16


Рисунок 17 – Слайд 17


Рисунок 18 – Слайд 18


Рисунок 19 – Слайд 19


Рисунок 20 – Слайд 20



