МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
Кафедра «Програмна інженерія»
 
 

ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду» 

 
Виконав:                                                           	          Перевірив:
ст. гр. ПЗПІ-22-10                                    	       	     	ст. викладач кафедри ПІ Кочевенко Іван Анатолійович				Сокорчук Ігор Петрович









Харків 2024
Мета:
Ознайомити студентів з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчити аналізувати та рефакторити код для покращення його якості.

Завдання:
Студент повинен обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

Хід роботи:
Було обрано мову програмування Ruby. У презентації (Додаток Б) наведено основні правила і рекомендації щодо оформлення програмного коду Ruby.

Висновки:
Набуто навичок рефакторингу програмного коду, детально розглянуто основні правила оформлення коду.

Відео-презентація: https://youtu.be/3KYsZPeM4us?si=hr2_f8QLlsa0NBZe


ДОДАТОК А

Файл «converter_miles_to_kilometers_before.rb»
1. class converter
2.     def milesToKm(miles)
3.       km = miles * 1.60934
4.       km
5.     end
6.   end

Файл «converter_miles_to_kilometers_after.rb»
1. class Converter
2.   MILES_TO_KILOMETERS_RATIO = 1.60934
3. 
4.   def miles_to_kilometers(miles)
5.     kilometers = miles * MILES_TO_KILOMETERS_RATIO
6.     kilometers
7.   end
8. end

Файл «calculate_area_before.rb»
1. def calculate_area(radius)
2.     if radius > 0
3.         area = Math::PI * radius**2
4.         puts "Площа становить #{area}"
5.     else
6.         puts "Неправильне значення"
7.     end
8. end

Файл «calculate_area_after.rb»
1. def calculate_area(radius)
2.   if radius > 0
3.     area = Math::PI * radius**2
4.     puts "Площа становить #{area}"
5.   else
6.     puts "Неправильне значення"
7.   end
8. end

Файл «concatenation.rb»
1. name = "Ivan"
2. age = 19
3. greeting = "Hello, " + name + ". You are " + age + " years old."
4. puts greeting

Файл «interpolation.rb»
1. name = "Ivan"
2. age = 19
3. greeting = "Hello, #{name}. You are #{age} years old."
4. puts greeting

Файл «comments.rb»
1. # Це однорядковий коментар
2. 
3. =begin
4. Це багаторядковий коментар,
5. що триває кілька рядків.
6. 1
7. 2
8. 3
9. =end

Файл «calculate_pi_monte_carlo_before.rb»
1. def calcpi(n)
2.   c = 0
3.   for i in 0...n
4.     x = rand
5.     y = rand
6.     if x**2 + y**2 <= 1
7.       c += 1
8.     end
9.   end
10.   return c / n.to_f * 4
11. end

Файл «calculate_pi_monte_carlo_after.rb»
1. def calculate_pi_monte_carlo(samples)
2.   points_inside_circle = count_points_inside_circle(samples)
3.   points_inside_circle / samples.to_f * 4
4. end
5. 
6. private
7. 
8. def count_points_inside_circle(samples)
9.   count = 0
10.   samples.times do
11.     x, y = generate_random_point
12.     count += 1 if inside_circle?(x, y)
13.   end
14.   count
15. end
16. 
17. def generate_random_point
18.   [rand, rand]
19. end
20. 
21. def inside_circle?(x, y)
22.   x**2 + y**2 <= 1
23. end
ДОДАТОК Б


Рисунок 1 – Слайд 1


Рисунок 2 – Слайд 2


Рисунок 3 – Слайд 3


Рисунок 4 – Слайд 4


Рисунок 5 – Слайд 5


Рисунок 6 – Слайд 6


Рисунок 7 – Слайд 7


Рисунок 8 – Слайд 8


Рисунок 9 – Слайд 9


Рисунок 10 – Слайд 10


Рисунок 11 – Слайд 11


Рисунок 12 – Слайд 12


Рисунок 13 – Слайд 13


Рисунок 14 – Слайд 14

